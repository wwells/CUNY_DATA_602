
I'd like to use this as an opportunity to learn more about image manipulation and classification (particularly since I'm also enrolled in DATA 605 on linear algebra) and to jump in and start learning about python libraries for classifier modeling.   MNIST seems to be a good choice since there are a lot of existing materials on using this dataset.   While I don't expect to contribute anything new to MNIST research, it should prove to be an excellent personal educational opportunity.


Propose:
a) Import the original dataset: http://yann.lecun.com/exdb/mnist/ 
b) Build functions to switch back and forth between:
	* original data format
	* images - be able to view sample image in Jupyter notebook  (Viz1)
	* vector - this is what we will primarily use to build our classifier; 
		* Image = 28 * 28; convert to 1 * 784 vector for simplicity
		* Dictionary: k = class, v = image vector
c) build a simple classifier from scratch: 
	* "Train" model:
		* Subset training data by known number (classes)
		* get mean pixel value for each class
	* Viz model (Viz2):
		* convert mean value classifier to image, view each class in notebook
d) Test model:
	* Using holdover data, compare pixel values in test image to mean pixel values for classes
	* Potential comparison methods: Euclidian Distance, Cosine Similarity
		* Examine and report on different cost function pro-cons
e)  Results reporting:
	* build DF reporting filename, classification, distance to each class, and ground truth
f)  describe performance of models, incorporate into performance visualization (Viz3)

Possibly in scope - compare the simple built from scratch model to more complex models using available libraries: 

* explore scikit-learn, other python libraries for classifier modeling
* train, test, and report using models (KNN, Linear Classifier, SVM, PCA, tSNE)
* if time, explore and learn about neural nets - train model (pybrain /  lasagne?)

Required resources:
Presume this can be accomplished entirely on a personal machine, but if, after early tests training/testing becomes too slow, will:
Use AWS (s3 / EBS), and port forward a jupyter notebook in an EC2 instance. 

References:

https://martin-thoma.com/classify-mnist-with-pybrain/
https://gist.github.com/akesling/5358964
When Life is Linear, Tim Chartier
http://colah.github.io/posts/2014-10-Visualizing-MNIST/
